app:
  title: Krateo PlatformOps Company - Krateo
  baseUrl: http://localhost:3000/
  googleAnalyticsTrackingId:
  support:
    url: https://github.com/backstage/backstage/issues # Used by common ErrorPage
    items: # Used by common SupportButton component
      - title: GitHub Krateo
        icon: github
        links:
          - url: https://github.com/krateoplatformops/krateo
            title: GitHub

organization:
  name: Krateo PlatformOps Company

backend:
  baseUrl: http://localhost:7007
  listen:
    port: 7007
  csp:
    connect-src: ["'self'", "http:", "https:"]
  cors:
    origin: http://localhost:3000/
    methods: [GET, POST, PUT, DELETE]
    credentials: true
  database:
    client: pg
    connection:
      host: localhost
      port: 5432
      user: maurosala
      password:
  cache:
    store: memory

sonarQube:
  baseUrl: https://sonarcloud.io/api

proxy:
  "/argocd/api/applications/name":
    target: http://krateo-module-core-argocd-server.krateo-system.svc/api/v1/applications
    changeOrigin: true
    secure: false
    headers:
      Cookie: argocd.token=${ARGOCD_AUTH_TOKEN}
  "/sonarqube":
    target: https://sonarcloud.io/api/api
    allowedMethods: ["GET"]
    secure: false
    auth: "${SONARQUBE_AUTH}:"
  "/grafana/api":
    target: https://grafana.krateo.io/
    headers:
      Authorization: Bearer ${GRAFANA_AUTH}
  "/prometheus/api":
    target: https://prometheus.krateo.io/api/v1/
    secure: false
    headers:
      Authorization: Bearer ${PROMETHEUS_TOKEN}

  "/circleci/api":
    target: https://circleci.com/api/v1.1
    headers:
      Circle-Token: ${CIRCLECI_AUTH_TOKEN}
  "/jenkins/api":
    target: https://jenkins.example.com
    changeOrigin: true
    headers:
      Authorization: Basic 123456789abcdef0123456789abcedf012

  "/travisci/api":
    target: https://api.travis-ci.com
    changeOrigin: true
    headers:
      Authorization: ${TRAVISCI_AUTH_TOKEN}
      travis-api-version: "3"

  "/newrelic/apm/api":
    target: https://api.newrelic.com/v2
    headers:
      X-Api-Key: ${NEW_RELIC_REST_API_KEY}

  "/pagerduty":
    target: https://api.pagerduty.com
    headers:
      Authorization: Token token=${PAGERDUTY_TOKEN}

  "/buildkite/api":
    target: https://api.buildkite.com/v2/
    headers:
      Authorization: ${BUILDKITE_TOKEN}

  "/sentry/api":
    target: https://sentry.io/api/
    allowedMethods: ["GET"]
    headers:
      Authorization: ${SENTRY_TOKEN}

  "/ilert":
    target: https://api.ilert.com
    allowedMethods: ["GET", "POST", "PUT"]
    allowedHeaders: ["Authorization"]
    headers:
      Authorization: ${ILERT_AUTH_HEADER}

  "/airflow":
    target: https://your.airflow.instance.com/api/v1
    headers:
      Authorization: ${AIRFLOW_BASIC_AUTH_HEADER}

  "/keptn":
    target: http://keptn.krateoplatformops.io/api/
    secure: false
    headers:
      x-token: ${KEPTN_API_TOKEN}

grafana:
  domain: https://grafana.krateo.io/

integrations:
  github:
    - host: github.com

      token: ${GITHUB_TOKEN}
  gitlab:
    - host: gitlab.com
      token: ${GITLAB_TOKEN}
  bitbucket:
    - host: bitbucket.org
      username: ${BITBUCKET_USERNAME}
      appPassword: ${BITBUCKET_APP_PASSWORD}
  azure:
    - host: dev.azure.com
      token: ${AZURE_TOKEN}

sentry:
  organization: my-company

rollbar:
  organization: my-company
  # NOTE: The rollbar-backend & accountToken key may be deprecated in the future (replaced by a proxy config)
  accountToken: my-rollbar-account-token

techdocs:
  builder: "local" # Alternatives - 'external'
  generator:
    runIn: "local" # Alternatives - 'local'
  publisher:
    type: "local"

auth:
  providers:
    guest:
      enabled: ${AUTH_GUEST}
    google:
      development:
        clientId: ${AUTH_GOOGLE_CLIENT_ID}
        clientSecret: ${AUTH_GOOGLE_CLIENT_SECRET}
    github:
      development:
        appOrigin: https://localhost/
        secure: false
        clientId: ${AUTH_GITHUB_CLIENT_ID}
        clientSecret: ${AUTH_GITHUB_CLIENT_SECRET}

    gitlab:
      development:
        clientId: ${AUTH_GITLAB_CLIENT_ID}
        clientSecret: ${AUTH_GITLAB_CLIENT_SECRET}
        audience: ${GITLAB_BASE_URL}
    saml:
      entryPoint: ${AUTH_SAML_ENTRY_POINT}
      issuer: ${AUTH_SAML_ISSUER}
    okta:
      development:
        clientId: ${AUTH_OKTA_CLIENT_ID}
        clientSecret: ${AUTH_OKTA_CLIENT_SECRET}
        audience: ${AUTH_OKTA_AUDIENCE}
    oauth2:
      development:
        clientId: ${AUTH_OAUTH2_CLIENT_ID}
        clientSecret: ${AUTH_OAUTH2_CLIENT_SECRET}
        authorizationUrl: ${AUTH_OAUTH2_AUTH_URL}
        tokenUrl: ${AUTH_OAUTH2_TOKEN_URL}
        ###
        # provide a list of scopes as needed for your OAuth2 Server:
        #
        # scope: saml-login-selector openid profile email
    oidc:
      development:
        metadataUrl: <metadataUrl>
        clientId: ${AUTH_OIDC_CLIENT_ID}
        clientSecret: ${AUTH_OIDC_CLIENT_SECRET}
        authorizationUrl: ${AUTH_OIDC_AUTH_URL}
        tokenUrl: ${AUTH_OIDC_TOKEN_URL}
        tokenSignedResponseAlg: ${AUTH_OIDC_TOKEN_SIGNED_RESPONSE_ALG}
    auth0:
      development:
        clientId: ${AUTH_AUTH0_CLIENT_ID}
        clientSecret: ${AUTH_AUTH0_CLIENT_SECRET}
        domain: ${AUTH_AUTH0_DOMAIN}
    microsoft:
      development:
        clientId: ${AUTH_MICROSOFT_CLIENT_ID}
        clientSecret: ${AUTH_MICROSOFT_CLIENT_SECRET}
        tenantId: ${AUTH_MICROSOFT_TENANT_ID}
    onelogin:
      development:
        clientId: ${AUTH_ONELOGIN_CLIENT_ID}
        clientSecret: ${AUTH_ONELOGIN_CLIENT_SECRET}
        issuer: ${AUTH_ONELOGIN_ISSUER}

scaffolder:
  github:
    token: ${GITHUB_TOKEN}
    visibility: public # or 'internal' or 'private'

catalog:
  import:
    entityFilename: catalog-info.yaml
    pullRequestBranchName: backstage-integration
  rules:
    - allow:
        [
          Component,
          System,
          API,
          Group,
          User,
          Resource,
          Location,
          Domain,
          Template,
        ]
  processors:

  locations:
    - type: microsoft-graph-org
      target: https://graph.microsoft.com/v1.0
      rules:
        - allow: [Group, User]

kubernetes:
  customResources:
  serviceLocatorMethod:
    type: "multiTenant"
  clusterLocatorMethods:
    - type: "config"
      clusters:
        - name: "local"
          url: "http://localhost:6443"
          serviceAccountToken: a
          skipTLSVerify: false
          authProvider: "serviceAccount"

lighthouse:
  baseUrl: http://localhost:3003

kafka:
  clientId: backstage
  clusters:
    - name: cluster
      brokers:
        - localhost:9092

allure:
  baseUrl: http://localhost:5050/allure-docker-service

pagerduty:
  eventsBaseUrl: "https://events.pagerduty.com/v2"
jenkins:
  instances:
    - name: "default"
      baseUrl: "https://jenkins.example.com"
      username: "backstage-bot"
      apiKey: "123456789abcdef0123456789abcedf012"
    - name: "departmentFoo"
      baseUrl: "https://jenkins-foo.example.com"
      username: "backstage-bot"
      apiKey: "123456789abcdef0123456789abcedf012"

azureDevOps:
  host: dev.azure.com
  token: my-token
  organization: my-company

apacheAirflow:
  baseUrl: https://your.airflow.instance.com

costInsights:
  engineerCost: 200000
  products:
    computeEngine:
      name: Compute Engine
      icon: compute
    cloudDataflow:
      name: Cloud Dataflow
      icon: data
    cloudStorage:
      name: Cloud Storage
      icon: storage
    bigQuery:
      name: BigQuery
      icon: search
    events:
      name: Events
      icon: data
  metrics:
    DAU:
      name: Daily Active Users
      default: true
    MSC:
      name: Monthly Subscribers
  currencies:
    engineers:
      label: "Engineers üõ†"
      unit: "engineer"
    usd:
      label: "US Dollars üíµ"
      kind: "USD"
      unit: "dollar"
      prefix: "$"
      rate: 1
    carbonOffsetTons:
      label: "Carbon Offset Tons ‚ôªÔ∏è‚öñÔ∏ès"
      kind: "CARBON_OFFSET_TONS"
      unit: "carbon offset ton"
      rate: 3.5
    beers:
      label: "Beers üç∫"
      kind: "BEERS"
      unit: "beer"
      rate: 4.5
    pintsIceCream:
      label: "Pints of Ice Cream üç¶"
      kind: "PINTS_OF_ICE_CREAM"
      unit: "ice cream pint"
      rate: 5.5

homepage:
  clocks:
    - label: UTC
      timezone: UTC
    - label: NYC
      timezone: "America/New_York"
    - label: STO
      timezone: "Europe/Stockholm"
    - label: TYO
      timezone: "Asia/Tokyo"

ldap:
  providers:

gocd:
  baseUrl: https://your.gocd.instance.com
